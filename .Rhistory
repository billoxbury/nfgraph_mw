source('test1.R')
source('mwshiny2.R')
source('mwshiny2.R')
?reactive
source('mwshiny2.R')
source('mwshiny2.R')
setwd("~/Programming/R/windows/mwshiny-examples/health")
source("~/Programming/R/windows/mwshiny-examples/health/encore_demo.R")
install.packages('r2d3')
source("~/Programming/R/windows/mwshiny-examples/health/encore_demo.R")
install.packages('topGO')
source("~/Programming/R/windows/mwshiny-examples/health/encore_demo.R")
install.packages('topG0')
install.packages('topGO')
setwd("~/Programming/R/windows")
source('mwshiny2.R')
source('mwshiny2.R')
?observeEvent
?bindEvent
source('mwshiny2.R')
source('mwshiny2.R')
source('mwshiny2.R')
source('mwshiny2.R')
source('mwshiny2.R')
calc
source('mwshiny2.R')
source('mwshiny2.R')
setwd("~/Projects/202409 iss_data_analysis/nfgraph_mw")
library(shiny)
library(mwshiny)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
runApp()
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
?sample
library(shiny)
library(vcd)
library(igraph)
library(shape)
?ecount
library(shiny)
library(vcd)
library(igraph)
library(shape)
load("data/box_profiles_20151217.Rds")
server_calc <- list()
server_out <- list()
source("functions.R")
# the comms graph:
g <- graph_from_edgelist(as.matrix(edges[,1:2]))
V(g)$size <- 0.1 * log(1 + degree(g))
V(g)$label <- ""
nbyte <- nbyte[,2]
deg <- degree(g)
cex_factor <- 2
g
ecount(g)
0.01*ecount(g)
esample <- sample(E(g), prob*ecount(g), prob=E(g)$weight)
prob = 0.01
esample <- sample(E(g), prob*ecount(g), prob=E(g)$weight)
esample
print(g)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui, server_calc, server_out)
mwsApp(ui_win, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
load("data/box_profiles_20151217.Rds")
source("functions.R")
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
source('~/Programming/R/windows/mwshiny2.R')
source("functions.R")
source("ui.R")
source("ui.R")
mwsApp(ui_win, server_calc, server_out)
source("functions.R")
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
source("functions.R")
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
?textOutput
source("functions.R")
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
source("functions.R")
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
if (interactive()) {
shinyApp(
ui = basicPage(
textInput("txt", "Enter the text to display below:"),
textOutput("text"),
verbatimTextOutput("verb")
),
server = function(input, output) {
output$text <- renderText({ input$txt })
output$verb <- renderText({ input$txt })
}
)
}
source("~/Projects/202409 iss_data_analysis/nfgraph_mw/test.R")
source("~/Projects/202409 iss_data_analysis/nfgraph_mw/test.R")
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
library(shiny)
library(mwshiny)
ui_win <- list()
server_calc <- list()
server_out <- list()
ui_win[["input"]] <- function(calc, sess){
basicPage(
textInput(inputId = "intxt",
"Enter the text to display below:"),
)
}
ui_win[["output"]] <- function(calc, sess){
basicPage(
textOutput("outtext"),
verbatimTextOutput("outverb")
)
}
server_calc[[1]] <- function(calc, sess) {
observeEvent(calc$intxt,
{
calc$response <- calc$intxt
})
}
server_out[["outtext"]] = function(calc, sess) {
renderText({ calc$response })
}
server_out[["outverb"]] = function(calc, sess) {
renderText({ calc$response })
}
mwsApp(ui_win, server_calc, server_out)
source('~/Programming/R/windows/mwshiny2.R')
source('~/Programming/R/windows/mwshiny2.R')
source('test.R')
library(shiny)
library(mwshiny)
ui_win <- list()
server_calc <- list()
server_out <- list()
ui_win[["input"]] <- function(calc, sess){
basicPage(
textInput(inputId = "intxt",
"Enter the text to display below:"),
)
}
ui_win[["output"]] <- function(calc, sess){
basicPage(
textOutput("outtext"),
verbatimTextOutput("outverb")
)
}
server_calc[[1]] <- function(calc, sess) {
observeEvent(calc$intxt,
{
calc[["response"]] <- calc$intxt
})
}
server_out[["outtext"]] = function(calc, sess) {
renderText({ calc$response })
}
server_out[["outverb"]] = function(calc, sess) {
renderText({ calc$response })
}
mwsApp(ui_win, server_calc, server_out)
source('mwshiny3.R')
source('mwshiny3.R')
?renderPrint
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('mwshiny3.R')
source('test.R')
?basicPage
source('test.R')
source('test.R')
source('test.R')
load("data/box_profiles_20151217.Rds")
source("functions.R")
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
source("functions.R")
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
source("functions.R")
source("ui.R")
source("server.R")
mwsApp(ui_win, server_calc, server_out)
source('app.R')
setwd("~/Projects/202409 iss_data_analysis/nfgraph_mw")
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
runApp()
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
is.null(NULL)
is.null(c())
source('app.R')
source('app.R')
source('app.R')
source('app.R')
library(shiny)
library(shiny)
library(shiny)
library(mwshiny)
####################################################################
# data and functions needed
source("functions.R")
load("data/box_profiles_20151217.Rds")
# the comms graph:
g <- graph_from_edgelist(as.matrix(edges[,1:2]))
V(g)$size <- 0.1 * log(1 + degree(g))
V(g)$label <- ""
nbyte <- nbyte[,2]
deg <- degree(g)
cex_factor <- 2
source("ui.R")
source("server.R")
runApp(mwsApp(ui, server_calc, server_out),
launch.browser = TRUE)
source('app.R')
source('app.R')
source('app.R')
source('app.R')
rev('hello')
reverse_edges('hello')
reverse('hello')
s = 'hello'
s[1:len(s)]
s[1:length(s)]
s[length(s):1]
strsplit(s)
?strsplit
strsplit(s,'')
reverse(strsplit(s,''))
reverse(strsplit(s,'')[[1]])
length('hello')
strrev <- function(s){
s1 <- strsplit(s,'')
n <- length(s1)
paste(s1[n:1])
}
length('hello')
strrev('hello')
?paste
?collapse
?paste
strrev <- function(s){
s1 <- strsplit(s,'')
n <- length(s1)
paste0(s1[n:1], collapse='')
}
strrev('hello')
s1 <- strsplit(s,'')
n <- length(s1)
paste0(s1[n:1], collapse='')
s1[n:1]
paste0(s1[[1]][n:1], collapse='')
paste(s1)
reverse_string <- function(s) {
paste(rev(strsplit(s, NULL)[[1]]), collapse = "")
}
paste(s1)
reverse_string('hello')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('app.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
source('test.R')
runApp()
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
?req
source('app.R')
req(a)
a
w
req(w)
w=NULL
req(w)
a
i
i=1
req(i)
w
x
is.null(x)
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
x
exists(x)
?brushedPoints
source('app.R')
source('app.R')
source('app.R')
source('app.R')
dataframe()
data.frame()
is.null(data.frame())
?brushOpts
data.frame(c('a','b'))
df <- data.frame(c('a','b'))
row.names(df)
as.numeric(row.names(df))
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('test.R')
source('test.R')
?req
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
runApp()
source('app.R')
source('app.R')
x
exists(x)
exists("x")
x = 1
exists("x")
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
